name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Lint with flake8
      run: |
        flake8 VolAlign --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 VolAlign --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff VolAlign/
      continue-on-error: true

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff VolAlign/
      continue-on-error: true

  test:
    name: Test Package
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y git

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install git

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build pytest pytest-cov wheel setuptools

    - name: Install package dependencies
      run: |
        pip install -r requirements.txt

    - name: Install VolAlign in development mode
      run: |
        pip install -e .

    - name: Test basic imports
      run: |
        python -c "import VolAlign; print('✓ VolAlign imported successfully')"
        python -c "from VolAlign import utils; print('✓ utils module imported')"
        python -c "from VolAlign import alignment_tools; print('✓ alignment_tools imported')"
        python -c "from VolAlign import distributed_processing; print('✓ distributed_processing imported')"
        python -c "from VolAlign import pipeline_orchestrator; print('✓ pipeline_orchestrator imported')"

    - name: Run tests
      run: |
        pytest tests/ -v --tb=short

  build:
    name: Build Package
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools pytest

    - name: Install package dependencies
      run: |
        pip install -r requirements.txt

    - name: Build wheel
      run: |
        python -m build --wheel

    - name: Build source distribution (Ubuntu only)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        python -m build --sdist

    - name: List built packages
      run: |
        ls -la dist/

    - name: Test wheel installation
      run: |
        pip install dist/*.whl --force-reinstall
        python -c "import VolAlign; print('✓ Wheel installation successful')"

    - name: Run build tests
      run: |
        pytest tests/test_build.py -v

    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist/*.whl

    - name: Upload source distribution (Ubuntu only)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: actions/upload-artifact@v3
      with:
        name: source-distribution
        path: dist/*.tar.gz

  test-installation:
    name: Test Installation Methods
    runs-on: ubuntu-latest
    strategy:
      matrix:
        install-method: ["pip-editable", "pip-wheel", "install-script"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools pytest

    - name: Test pip editable installation
      if: matrix.install-method == 'pip-editable'
      run: |
        pip install -r requirements.txt
        pip install -e .
        python -c "import VolAlign; print('✓ Editable installation works')"

    - name: Test wheel installation
      if: matrix.install-method == 'pip-wheel'
      run: |
        pip install -r requirements.txt
        python -m build --wheel
        pip install dist/*.whl
        python -c "import VolAlign; print('✓ Wheel installation works')"

    - name: Test installation script
      if: matrix.install-method == 'install-script'
      run: |
        chmod +x install.sh
        ./install.sh dev
        python -c "import VolAlign; print('✓ Installation script works')"

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov tox
        pip install -r requirements.txt
        pip install -e .

    - name: Run all tests
      run: |
        pytest tests/ -v --tb=short

    - name: Test with tox
      run: |
        tox -e py311,lint,build,imports,wheel-test

  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    needs: [integration]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install publishing dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/* --skip-existing
      continue-on-error: true

    # Uncomment when ready for production PyPI
    # - name: Upload to PyPI
    #   if: startsWith(github.ref, 'refs/tags/')
    #   env:
    #     TWINE_USERNAME: __token__
    #     TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
    #   run: |
    #     twine upload dist/*